/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controller.ClienteController;
import controller.ContactoClienteController;
import controller.DetalleGuiaDeRemisionController;
import controller.DetallePedidoController;
import controller.DetalleProformaController;
import controller.PedidoController;
import controller.UsuarioController;
import entity.Cliente;
import entity.ContactoCliente;
import entity.DetalleGuiaDeRemision;
import entity.DetallePedido;
import entity.DetalleProforma;
import entity.Pedido;
import entity.Usuario;
import java.awt.Color;
import java.awt.Component;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ARCRODINPC-06
 */
public class IdPedidoParaGuiaDeRemision extends javax.swing.JInternalFrame {

    /**
     * Creates new form PedidosAGuiaRemision
     */
    int idPedido;
    int numPedido;
    int idProf;
    String numCotizacion;
    int idCliente;
    int idContactCli;
    int idUsuario;
    String moneda;
    String formPago;
    String tipo;
    String fechaEmision;
    int dia1;
    int dia2;
    String detalleOrden;
    String estado;
    String observacion;
    String campo1;
   
    String campo3;
    
    String nombre;
    String apellido;
    String nombreContacto;
    String dni;
    String atencion;
    
    String filtro="cli.razonSocial";
    int tabla;
    
    String anioCadena;
    int anio;
    
    String cant;
    String descripcion;
   
    int idDetGuia;
    
    String ordenCompra;
    
    static String idPedidoStatic;
    static String numPedidoStatic;
    
    public IdPedidoParaGuiaDeRemision() {
        initComponents();
        listaPedido(filtro,txtFiltro.getText());
        jTable1.setDefaultRenderer (Object.class, new RowsRenderer());
    }
    
    public class RowsRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable jTable1, Object value, boolean selected, boolean focused, int row, int column) {
//            jTable1.setBackground(Color.white);
//            jTable1.setForeground(Color.black);
            super.getTableCellRendererComponent(jTable1, value, selected, focused, row, column);

            if ("EN PROCESO".equals((jTable1.getValueAt(row, column)))) {
                this.setOpaque(true);
                this.setForeground(Color.decode("#CCCC00"));//amarillo/anaranjado

            } else if ("FINALIZADO".equals((jTable1.getValueAt(row, column)))) {
                this.setOpaque(true);
                this.setForeground(Color.decode("#009900"));//verde

            } else if ("ANULADO".equals((jTable1.getValueAt(row, column)))) {
                this.setOpaque(true);
                this.setForeground(Color.RED);

            } else if ((!"ANULADO".equals((jTable1.getValueAt(row, column))))
                    && (!"FINALIZADO".equals((jTable1.getValueAt(row, column)))
                    && (!"EN PROCESO".equals((jTable1.getValueAt(row, column)))))) {
                this.setOpaque(true);
                this.setForeground(Color.BLACK);
            }

            if (selected) {
                setBackground(Color.decode("#39698a"));
                setForeground(Color.decode("#FFFFFF"));
            } else{
                setBackground(Color.WHITE);
            }

            return this;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFiltro = new javax.swing.JTextField();
        buttonLimpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtNumPedido = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNumCotizacion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtRazSocial = new javax.swing.JTextField();
        comboBoxContacto = new javax.swing.JComboBox<>();
        buttonAgregarContacto = new javax.swing.JButton();
        comboBoxFiltro = new javax.swing.JComboBox<>();
        buttonAgregar = new javax.swing.JButton();
        buttonCerrar = new javax.swing.JButton();

        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltroKeyReleased(evt);
            }
        });

        buttonLimpiar.setText("Limpiar");
        buttonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimpiarActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num. Ped.", "Num. Cotiz.", "Razón Social", "Contacto", "Fecha", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(75);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(75);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(355);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(96);
        }

        jLabel1.setText("Num. Pedido:");

        txtNumPedido.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        jLabel2.setText("Num. Cotización:");

        jLabel3.setText("Razón Social:");

        comboBoxContacto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxContactoItemStateChanged(evt);
            }
        });

        buttonAgregarContacto.setText("Contacto:");
        buttonAgregarContacto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAgregarContactoActionPerformed(evt);
            }
        });

        comboBoxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR", "NUM. PEDIDO", "NUM. COTIZACIÓN", "RAZON SOCIAL", "CONTACTO", "ESTADO", "FECHA" }));
        comboBoxFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxFiltroItemStateChanged(evt);
            }
        });

        buttonAgregar.setText("Agregar Guia Remisión");
        buttonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAgregarActionPerformed(evt);
            }
        });

        buttonCerrar.setText("Cerrar");
        buttonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(comboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(buttonLimpiar))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtNumCotizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtNumPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(buttonAgregar)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtRazSocial, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 23, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(buttonAgregarContacto)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(comboBoxContacto, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonLimpiar)
                    .addComponent(comboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNumPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtRazSocial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAgregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAgregarContacto)
                    .addComponent(jLabel2)
                    .addComponent(txtNumCotizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonCerrar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyReleased
        listaPedido(filtro,txtFiltro.getText());
    }//GEN-LAST:event_txtFiltroKeyReleased

    private void comboBoxFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxFiltroItemStateChanged
        if (comboBoxFiltro.getSelectedItem() == "NUM. PEDIDO") {
            filtro = "ped.numPedido";
            listaPedido(filtro, txtFiltro.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "NUM. COTIZACIÓN") {
            filtro = "prof.codProforma";
            listaPedido(filtro, txtFiltro.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "RAZON SOCIAL") {
            filtro = "cli.razonSocial";
            listaPedido(filtro, txtFiltro.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "CONTACTO") {
            filtro = "concat(concli.nombres,' ',concli.apellidos)";
            listaPedido(filtro, txtFiltro.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "ESTADO") {
            filtro = "ped.estado";
            listaPedido(filtro, txtFiltro.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "FECHA") {
            filtro = "ped.fechaPedido";
            listaPedido(filtro, txtFiltro.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "SELECCIONAR") {
            filtro = "razonSocial";
            listaPedido(filtro, txtFiltro.getText());
            System.out.println(filtro);
        }
    }//GEN-LAST:event_comboBoxFiltroItemStateChanged

    private void comboBoxContactoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxContactoItemStateChanged
        nombreContacto=comboBoxContacto.getSelectedItem().toString();
        System.out.println("contacto:"+nombreContacto);
    }//GEN-LAST:event_comboBoxContactoItemStateChanged

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        tabla=jTable1.getSelectedRow();
        numPedido=Integer.parseInt(jTable1.getValueAt(tabla,0).toString());
        numCotizacion=jTable1.getValueAt(tabla,1).toString();
        txtNumCotizacion.setText(numCotizacion);
        fechaEmision=jTable1.getValueAt(tabla,4).toString();
        
        
        System.out.println("numerocotizacion, numeroPedido y fecha:"+numCotizacion+", "+numPedido+" y "+fechaEmision);
        try {
            consultarAnioPedido(fechaEmision, numPedido);
            System.out.println("año: "+ anio);
        } catch (Exception ex) {
            Logger.getLogger(PedidosOrdenCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            consultarPedido(numPedido, anio);
        } catch (Exception ex) {
            Logger.getLogger(PedidosOrdenCorte.class.getName()).log(Level.SEVERE, null, ex);
        }
              
    }//GEN-LAST:event_jTable1MouseClicked

    private void buttonAgregarContactoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAgregarContactoActionPerformed
        Clientes.x=idCliente;
        if (Clientes.x!= 0) {
            ContactosClientes conCliente = null;
            try {
                conCliente = new ContactosClientes();
            } catch (Exception ex) {
                Logger.getLogger(IdPedidoParaGuiaDeRemision.class.getName()).log(Level.SEVERE, null, ex);
            }
            Principal.jDesktopPane1.add(conCliente);
            conCliente.toFront();
            conCliente.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Agregar Cliente");

        }
    }//GEN-LAST:event_buttonAgregarContactoActionPerformed

    private void buttonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimpiarActionPerformed
       limpiar();
    }//GEN-LAST:event_buttonLimpiarActionPerformed

    private void buttonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAgregarActionPerformed
      GuiaRemision.numYIdPedidoParaGuia();
      dispose();
    }//GEN-LAST:event_buttonAgregarActionPerformed

    private void buttonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCerrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAgregar;
    private javax.swing.JButton buttonAgregarContacto;
    private javax.swing.JButton buttonCerrar;
    private javax.swing.JButton buttonLimpiar;
    private javax.swing.JComboBox<String> comboBoxContacto;
    private javax.swing.JComboBox<String> comboBoxFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtFiltro;
    private javax.swing.JTextField txtNumCotizacion;
    public static javax.swing.JTextField txtNumPedido;
    private javax.swing.JTextField txtRazSocial;
    // End of variables declaration//GEN-END:variables
    PedidoController pedidocontroler = new PedidoController();
    Pedido pedido;
    
    ClienteController clientecontroler = new ClienteController();
    Cliente cliente;
    
    ContactoClienteController contactoclientecontroler= new ContactoClienteController();
    ContactoCliente contactocliente;

    UsuarioController usuariocontroler = new UsuarioController();
    Usuario usuario;

    DetallePedidoController detallepedidocontroler = new DetallePedidoController();
    DetallePedido detallepedido;

    DetalleGuiaDeRemisionController detGuiaController = new DetalleGuiaDeRemisionController();
    DetalleGuiaDeRemision detGuia;
    
    DetalleProformaController detalleproformacontroler= new DetalleProformaController();
    DetalleProforma detalleproforma;
    

        
//------------------------ Consultar --------------------------------------
    
    private void consultarClientePorId(int iddecliente) throws Exception {
        cliente = clientecontroler.ClienteBuscar1(iddecliente);
        if (cliente != null) {

            txtRazSocial.setText(cliente.getRazonSocial());
                        
        } else {
            JOptionPane.showMessageDialog(null, "Cliente no registrado por ahora");
            //System.out.println("Error");
        }
    }
    
     private void consultarContactoCliente(String nombre, int idDeCliente) throws Exception {

        contactocliente = contactoclientecontroler.ContactoClienteBuscarDni(nombre, idDeCliente);
        if (contactocliente != null) {
            idContactCli = contactocliente.getIdContactoCliente();
            System.out.println("idCliente"+idContactCli);
            dni=contactocliente.getDni();
            atencion="ATENCION: "+nombre+" DNI:"+dni;
            System.out.println(atencion);

        } else {
            JOptionPane.showMessageDialog(null, "EL Cliente no tiene contactos, Registre un contacto!!!!");
            //System.out.println("Error");
        }
    } 
    
     private void consultarContactoCliente1(int idContacto) throws Exception {

        contactocliente = contactoclientecontroler.ContactoClienteBuscar2(idContacto);
        if (contactocliente != null) {

            nombre = contactocliente.getNombres();
            apellido = contactocliente.getApellidos();
            nombreContacto = nombre + " " + apellido;
            System.out.println(nombreContacto );

        } else {
            JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    } 
     
    private void consultarAnioPedido(String fech, int num) throws Exception {
        pedido = pedidocontroler.PedidoBuscarAnio(fech, num);
        if (pedido != null) {
            anioCadena=pedido.getAnio();
            anio=Integer.parseInt(anioCadena);
        }
  
    }
         
    private void consultarPedido(int numeroPedido, int anio) throws Exception {
        pedido = pedidocontroler.PedidoBuscar(numeroPedido, anio);
        if (pedido != null) {
            
            idPedido=pedido.getIdPedido();
            idPedidoStatic=Integer.toString(pedido.getIdPedido());
            txtNumPedido.setText(String.format("%06d",pedido.getNumPedido()));
            numPedidoStatic=Integer.toString(pedido.getNumPedido());
            numPedido=pedido.getNumPedido();
            idProf=pedido.getIdProforma();
            
            idCliente = pedido.getIdCliente();
            Clientes.x = pedido.getIdCliente();
            consultarClientePorId(idCliente);
            
            comboBoxContacto.setModel(contactoclientecontroler.ListarCombodeContacto(txtRazSocial.getText(),idCliente));
            
            idContactCli = pedido.getIdContactoCliente();
            consultarContactoCliente1(idContactCli);
             
            String testValue1 = nombreContacto;
            System.out.println("pedido contacto cliente:"+nombreContacto);
            
            for (int i = 0; i < comboBoxContacto.getModel().getSize(); i++) {
                
                if (comboBoxContacto.getItemAt(i).equals(testValue1)) {
                    
                    System.out.println("for "+i);
                    comboBoxContacto.setSelectedIndex(i);
                   
                    break;
                }
            }
            
            consultarContactoCliente(nombreContacto, idCliente);
            
            idUsuario = pedido.getIdUsuario();
            
            moneda = pedido.getMoneda();
            formPago=pedido.getFormPago();

            tipo = pedido.getTipo();
            fechaEmision=pedido.getFechaEmision();
            dia1=pedido.getDia1();
            dia2=pedido.getDia2();
            detalleOrden=pedido.getDetalleOrden();
            ordenCompra=pedido.getNumOrden();
            
            estado=pedido.getEstado();
            System.out.println("Estado de pedido: " + estado);

            observacion=pedido.getObservacion();

        } else {
            JOptionPane.showMessageDialog(null, "Pedido no registrado");
           
            System.out.println("Pedido no registrado");
        }
    }  
    
    
//------------------------------ Tabla ------------------------------------------------------
 void listaPedido(String valorFiltro,String filtrolike) {
        
        List<Pedido> lista;
        try {
            lista = pedidocontroler.PedidoFiltrar(valorFiltro, filtrolike);
            verPedido(lista);

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    void verPedido(List<Pedido> lista) {
        String numeropedido;
        
        DefaultTableModel tabla = (DefaultTableModel) jTable1.getModel();
        tabla.setRowCount(0);
        for (Pedido ped : lista) {
            numeropedido=String.format("%06d",ped.getNumPedido());
            Object[] fila = {numeropedido, ped.getCodCotiz(), ped.getRazSocial(), ped.getContacto(), ped.getFechaEmision(),ped.getEstado()};
            tabla.addRow(fila);
        }
    }
    


//----------------------------------- Limpiar -----------------------------------------
    void limpiar() {

        txtNumPedido.setText("");
        txtNumCotizacion.setText("");
        txtRazSocial.setText("");
        comboBoxContacto.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));}
  }
