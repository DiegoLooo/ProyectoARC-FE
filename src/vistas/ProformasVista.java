/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import com.sun.glass.events.KeyEvent;
import controller.ClienteController;
import controller.ContactoClienteController;
import controller.DetalleProformaController;
import controller.ProformaController;
import controller.UsuarioController;
import entity.Cliente;
import entity.ContactoCliente;
import entity.DetalleProforma;
import entity.Proforma;
import entity.Usuario;
import exportarexcel.clsExportarExcel;
import java.awt.Color;
import java.awt.Component;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import reportes.GenerarReporte;


/**
 *
 * @author ARCRODINPC-02
 */
public final class ProformasVista extends javax.swing.JInternalFrame {

    /**
     * Creates new form ProformasVista
     */
    
    String codProf;
    String razonSocial;
    String contacto;
    String fecha;
    String filtro="razonSocial";
    int tabla;
    int idProf;
    
    String nombre;
    String apellido;
    String usuarioNombre;
    
    String comboEstado;
    String estado;
    
    int idCli;
    int idConCli;
    int idUs;
    String moneda;
    String validez;
    String formPag;
    String tipo;
    int dia1;
    int dia2;
    String obs;
    
    String anioCadena;
    int anio;
    static int anioproformas;
    static String numeroCotizacion;
    
    int numPed;
    boolean comprobar=false;
    
    
    
    public ProformasVista() {
        
        initComponents();
        listaProforma(filtro,txtLike.getText());
        habilitarInicio();
        jTable1.setDefaultRenderer (Object.class, new RowsRenderer());
    }

    public class RowsRenderer extends DefaultTableCellRenderer {

       
        @Override
        public Component getTableCellRendererComponent(JTable jTable1, Object value, boolean selected, boolean focused, int row, int column) {
            jTable1.setBackground(Color.white);
            jTable1.setForeground(Color.black);
            super.getTableCellRendererComponent(jTable1, value, selected, focused, row, column);
            if ("APROBADO".equals((jTable1.getValueAt(row, column))))  {
                this.setOpaque(true);
                this.setForeground(Color.decode("#009900"));//verde
                
            } else if ("PENDIENTE".equals((jTable1.getValueAt(row, column)))) {
                this.setOpaque(true);
                this.setForeground(Color.decode("#CCCC00"));
                
            } else if ("ANULADO".equals((jTable1.getValueAt(row, column)))) {
                this.setOpaque(true);
                this.setForeground(Color.RED);
                
            } else if ("NO APROBADO".equals((jTable1.getValueAt(row, column)))) {
                this.setOpaque(true);
                this.setForeground(Color.BLACK);
                
            } else if ((!"ANULADO".equals((jTable1.getValueAt(row, column))))&&
                       (!"PENDIENTE".equals((jTable1.getValueAt(row, column))) && 
                       (!"APROBADO".equals((jTable1.getValueAt(row, column))))) && 
                       (!"NO APROBADO".equals((jTable1.getValueAt(row, column))))){
                this.setOpaque(true);
                this.setForeground(Color.black);
            }
            
            if (selected) {
                setBackground(Color.decode("#39698a"));
                setForeground(Color.decode("#FFFFFF"));
            } else{
                setBackground(Color.WHITE);
            }
            
            return this;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtLike = new javax.swing.JTextField();
        buttonCerrar = new javax.swing.JButton();
        comboBoxFiltro = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        txtCodProf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTipo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtMoneda = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtFormPago = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        labelSubtotal = new javax.swing.JLabel();
        labelIgv = new javax.swing.JLabel();
        labelTotal = new javax.swing.JLabel();
        buttonLimpiar = new javax.swing.JButton();
        buttonPdf = new javax.swing.JButton();
        buttonImprimir = new javax.swing.JButton();
        buttonModificarCot = new javax.swing.JButton();
        buttonPedido = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtContactoCliente = new javax.swing.JTextField();
        buttonExportExcel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        comboBoxEstado = new javax.swing.JComboBox<>();
        buttonModificar = new javax.swing.JButton();
        buttonGuardar = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtObsInterna = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        txtRuc = new javax.swing.JTextField();
        txtTiempoEntrega = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Vista de Cotizaciones ");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num. Cotización", "Razon Social", "Contacto", "Fecha", "Tipo", "Estado", "Elaborado por", "Obs Interna"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable1MouseEntered(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(95);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(95);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(110);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(245);
        }

        txtLike.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLikeKeyReleased(evt);
            }
        });

        buttonCerrar.setText("Cerrar");
        buttonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCerrarActionPerformed(evt);
            }
        });

        comboBoxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR", "NUM. COTIZACIÓN", "RAZON SOCIAL", "CONTACTO", "ESTADO", "FECHA", "ELABORADO POR", "TIPO" }));
        comboBoxFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxFiltroItemStateChanged(evt);
            }
        });

        jLabel1.setText("Cotización:");

        jLabel2.setText("Cliente:");

        jLabel3.setText("Tipo:");

        jLabel4.setText("Moneda:");

        jLabel5.setText("T. Entrega:");

        jLabel6.setText("Forma:");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idDetalleCot", "Item", "Cant.", "Descripción", "Valor Unitario", "Precio Unitario", "Importe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(45);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(45);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(550);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(100);
            jTable2.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTable2.getColumnModel().getColumn(6).setPreferredWidth(100);
        }

        jLabel8.setText("Subtotal:");

        jLabel9.setText("I.G.V.(18%):");

        jLabel10.setText("Total:");

        labelSubtotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelSubtotal.setText("000000.00");

        labelIgv.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelIgv.setText("000000.00");

        labelTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTotal.setText("000000.00");

        buttonLimpiar.setText("limpiar");
        buttonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimpiarActionPerformed(evt);
            }
        });

        buttonPdf.setText("PDF");
        buttonPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPdfActionPerformed(evt);
            }
        });

        buttonImprimir.setText("Imprimir");
        buttonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImprimirActionPerformed(evt);
            }
        });

        buttonModificarCot.setText("Modificar Cotización");
        buttonModificarCot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModificarCotActionPerformed(evt);
            }
        });

        buttonPedido.setText("Generar Pedido");
        buttonPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPedidoActionPerformed(evt);
            }
        });

        jLabel11.setText("Contacto:");

        buttonExportExcel.setText("ExportExcel");
        buttonExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportExcelActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setText("Estado:");

        comboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR", "APROBADO", "PENDIENTE", "NO APROBADO", "ANULADO" }));
        comboBoxEstado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxEstadoItemStateChanged(evt);
            }
        });

        buttonModificar.setText("Modificar ");
        buttonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModificarActionPerformed(evt);
            }
        });

        buttonGuardar.setText("Guardar");
        buttonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuardarActionPerformed(evt);
            }
        });

        jLabel12.setText("Obs. Interna:");

        txtObsInterna.setColumns(20);
        txtObsInterna.setRows(5);
        jScrollPane3.setViewportView(txtObsInterna);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(buttonModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(comboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonModificar)
                    .addComponent(buttonGuardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel14.setText("R.U.C.:");

        jLabel13.setText("Correo:");

        jLabel15.setText("Teléfono 1:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtLike, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(buttonLimpiar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 966, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonModificarCot, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTiempoEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCodProf, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtRuc, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtFormPago, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtContactoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTelefono))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(1010, 1010, 1010)
                .addComponent(buttonExportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(85, 85, 85)
                                        .addComponent(jLabel9))
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelIgv, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(119, 119, 119)
                        .addComponent(buttonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLike, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonLimpiar)
                        .addComponent(buttonExportExcel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCodProf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel14)
                                .addComponent(txtRuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)
                                .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(txtFormPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtContactoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel13)
                            .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTiempoEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(buttonPdf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonImprimir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonPedido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonModificarCot)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(labelSubtotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelIgv)
                    .addComponent(jLabel9)
                    .addComponent(jLabel4)
                    .addComponent(txtMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelTotal)
                        .addComponent(jLabel10))
                    .addComponent(buttonCerrar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCerrarActionPerformed
       dispose();
    }//GEN-LAST:event_buttonCerrarActionPerformed

    private void txtLikeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLikeKeyReleased
       listaProforma(filtro,txtLike.getText());
    }//GEN-LAST:event_txtLikeKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        limpiarTabla();
        habilitarGuardar();
        tabla=jTable1.getSelectedRow();
        codProf = jTable1.getValueAt(tabla,0).toString();
        fecha=jTable1.getValueAt(tabla,3).toString();
        try {
            consultarAnioProforma(fecha, codProf);
            anioproformas=anio;
        } catch (Exception ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
           // consultarCodProforma(codProf);
            txtCodProf.setText(codProf);
            consultarProforma(codProf, anio);
        } catch (Exception ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(idProf);
        listaDetalleProforma();
        try {
            consultarPago();
        } catch (Exception ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void buttonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModificarActionPerformed
         habilitarModificar();
    }//GEN-LAST:event_buttonModificarActionPerformed

    private void comboBoxFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxFiltroItemStateChanged
        if (comboBoxFiltro.getSelectedItem() == "NUM. COTIZACIÓN") {
            filtro = "codProforma";
            listaProforma(filtro, txtLike.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "RAZON SOCIAL") {
            filtro = "razonSocial";
            listaProforma(filtro, txtLike.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "CONTACTO") {
            filtro = "concat(contactocliente.nombres,' ',contactocliente.apellidos)";
            listaProforma(filtro, txtLike.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "ESTADO") {
            filtro = "estado";
            listaProforma(filtro, txtLike.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "FECHA") {
            filtro = "fechaEmision";
            listaProforma(filtro, txtLike.getText());
            System.out.println(filtro);
        } else if (comboBoxFiltro.getSelectedItem() == "ELABORADO POR") {
            filtro = "concat(usuario.nombres,' ',usuario.apellidos)";
            listaProforma(filtro, txtLike.getText());
            System.out.println(filtro);
        }else if (comboBoxFiltro.getSelectedItem() == "TIPO") {
            filtro = "proforma.tipo";
            listaProforma(filtro, txtLike.getText());
            System.out.println(filtro);
        }else if (comboBoxFiltro.getSelectedItem() == "SELECCIONAR") {
            filtro = "razonSocial";
            listaProforma(filtro, txtLike.getText());
            System.out.println(filtro);
        }
    }//GEN-LAST:event_comboBoxFiltroItemStateChanged

    private void comboBoxEstadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxEstadoItemStateChanged
            if (comboBoxEstado.getSelectedIndex() != 0) {
            comboEstado = comboBoxEstado.getSelectedItem().toString();
            System.out.println(comboEstado);
        } else {
            comboEstado="";
        }
    }//GEN-LAST:event_comboBoxEstadoItemStateChanged

    private void buttonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuardarActionPerformed
        try {
            procesar(2);
        } catch (Exception ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        listaProforma(filtro,txtLike.getText());
        habilitarGuardar();
    }//GEN-LAST:event_buttonGuardarActionPerformed

    private void jTable1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseEntered

    private void buttonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimpiarActionPerformed
        limpiar();
        idProf = 0;
        listaDetalleProforma();
        habilitarInicio();
    }//GEN-LAST:event_buttonLimpiarActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if((evt.getKeyCode()==KeyEvent.VK_DOWN)||(evt.getKeyCode()==KeyEvent.VK_UP) ){
        limpiarTabla();
        habilitarGuardar();
        tabla=jTable1.getSelectedRow();
        codProf = jTable1.getValueAt(tabla,0).toString();
        fecha=jTable1.getValueAt(tabla,3).toString();
        try {
            consultarAnioProforma(fecha, codProf);
            anioproformas=anio;
        } catch (Exception ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
         //   consultarCodProforma(codProf);
            txtCodProf.setText(codProf);
            consultarProforma(codProf, anio);
        } catch (Exception ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(idProf);
        listaDetalleProforma();
        try {
            consultarPago();
        } catch (Exception ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        }
    }//GEN-LAST:event_jTable1KeyReleased

    private void buttonPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPdfActionPerformed
        GenerarReporte profRep= new GenerarReporte();
             
        try {
            profRep.ReporteProforma(idProf);
        } catch (SQLException ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_buttonPdfActionPerformed

    private void buttonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImprimirActionPerformed
        GenerarReporte profRep= new GenerarReporte();
        
        try {
            profRep.Imprimir(idProf);
        } catch (SQLException ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonImprimirActionPerformed

    private void buttonModificarCotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModificarCotActionPerformed
//        Proformas ped = null;
//        try {
//            ped = new Proformas();
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (Exception ex) {
//            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        Principal.jDesktopPane1.add(ped);
//        ped.toFront();
//        ped.setVisible(true);
//        Proformas.NumProformas();
    }//GEN-LAST:event_buttonModificarCotActionPerformed

    private void buttonPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPedidoActionPerformed

//        try {
//            consultarCotizacionParaPedido(idProf);
//        } catch (Exception ex) {
//            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        if (comprobar == false) {
//
//             if (JOptionPane.showConfirmDialog(rootPane, "La Cotización ya tiene Pedido, ¿desea continuar?",
//                "Pedido Registrado", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
//                 Pedidos ped = null;
//                 try {
//                     ped = new Pedidos();
//                 } catch (ClassNotFoundException ex) {
//                     Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
//                 } catch (Exception ex) {
//                     Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
//                 }
//                 Principal.jDesktopPane1.add(ped);
//                 ped.toFront();
//                 ped.setVisible(true);
//                 Pedidos.NumProformasPed();
//             }
//            habilitarGuardar();
//
//        } else if (comprobar == true) {
//
//            Pedidos ped = null;
//            try {
//                ped = new Pedidos();
//            } catch (ClassNotFoundException ex) {
//                Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (Exception ex) {
//                Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            Principal.jDesktopPane1.add(ped);
//            ped.toFront();
//            ped.setVisible(true);
//            Pedidos.NumProformasPed();
//        }
//        
        
//        try {
//            consultarCotizacionParaPedido(idProf);
//        } catch (Exception ex) {
//            Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        if (comprobar == false) {
//
//            JOptionPane.showMessageDialog(null, "Cotización ya tiene pedido");
//            habilitarGuardar();
//
//        } else if (comprobar == true) {
//
//            Pedidos ped = null;
//            try {
//                ped = new Pedidos();
//            } catch (ClassNotFoundException ex) {
//                Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (Exception ex) {
//                Logger.getLogger(ProformasVista.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            Principal.jDesktopPane1.add(ped);
//            ped.toFront();
//            ped.setVisible(true);
//            Pedidos.NumProformasPed();
//        }
    }//GEN-LAST:event_buttonPedidoActionPerformed

    private void buttonExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportExcelActionPerformed
        clsExportarExcel objeto = new clsExportarExcel();
        try {
            objeto.exportarExcel(jTable1);
        } catch (IOException ex) {
            Logger.getLogger(CajaChicaRegistro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonExportExcelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCerrar;
    private javax.swing.JButton buttonExportExcel;
    private javax.swing.JButton buttonGuardar;
    private javax.swing.JButton buttonImprimir;
    private javax.swing.JButton buttonLimpiar;
    private javax.swing.JButton buttonModificar;
    private javax.swing.JButton buttonModificarCot;
    private javax.swing.JButton buttonPdf;
    private javax.swing.JButton buttonPedido;
    private javax.swing.JComboBox<String> comboBoxEstado;
    private javax.swing.JComboBox<String> comboBoxFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel labelIgv;
    private javax.swing.JLabel labelSubtotal;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JTextField txtCliente;
    public static javax.swing.JTextField txtCodProf;
    private javax.swing.JTextField txtContactoCliente;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtFormPago;
    private javax.swing.JTextField txtLike;
    private javax.swing.JTextField txtMoneda;
    private javax.swing.JTextArea txtObsInterna;
    private javax.swing.JTextField txtRuc;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtTiempoEntrega;
    private javax.swing.JTextField txtTipo;
    // End of variables declaration//GEN-END:variables


    ProformaController obj = new ProformaController();
    Proforma pro;
    
    ClienteController clientecontroler = new ClienteController();
    Cliente cliente;
    
    ContactoClienteController contactoclientecontroler= new ContactoClienteController();
    ContactoCliente contactocliente;

    UsuarioController usuariocontroler = new UsuarioController();
    Usuario usuario;

    DetalleProformaController detalleproformacontroler = new DetalleProformaController();
    DetalleProforma detalleproforma;

    
//--------------------------- Consultar -----------------------------
    private void consultarCodProforma(String codProforma) throws Exception {
        pro = obj.ProformaBuscar(codProforma);
        if (pro != null) {

            idProf = pro.getIdProforma();

        } else {
            JOptionPane.showMessageDialog(null, "Proforma no registrada por ahora");
            //System.out.println("Error");
        }
    }

//----------------------------------------- Tabla --------------------------------------------
    void listaProforma(String valorFiltro,String filtrolike) {
        List<Proforma> lista;
        try {
            lista = obj.ProformaFiltrar(valorFiltro, filtrolike);
            verProforma(lista);

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    void verProforma(List<Proforma> lista) {
        String Tp=null;
        DefaultTableModel tabla = (DefaultTableModel) jTable1.getModel();
        tabla.setRowCount(0);
        for (Proforma prof : lista) {
            if ("PRODUCTO".equals(prof.getTipo())) {
                Tp = "P";
            } else if ("SERVICIO".equals(prof.getTipo())) {
                Tp = "S";
            }
            Object[] fila = {prof.getCodProforma(), prof.getRazonSocial(), prof.getContacto(), prof.getFechaEmision(), 
                             Tp,prof.getEstado(), prof.getUsuario(), prof.getObservacionInterna()};
            tabla.addRow(fila);
        }
    }
    
    
//---------------------------------- Consultar Proforma con evento clicked -------------------------------------
     private void consultarProforma(String codigo, int anio) throws Exception {
        pro= obj.ProformaBuscar(codigo, anio);
        if (pro != null) {
             
            idProf=pro.getIdProforma();
            idCli = pro.getIdCliente();
            consultarClientePorId(idCli);
            idConCli = pro.getIdContactoCliente();
            consultarContactoCliente(idConCli);
            idUs = pro.getIdUsuario();
            consultarUsuario1(idUs);
             moneda = pro.getMoneda();
            txtMoneda.setText(pro.getMoneda());
            validez = pro.getValidez();
            formPag = pro.getFormPago();
            txtFormPago.setText(pro.getFormPago());
            fecha=pro.getFechaEmision();
            tipo = pro.getTipo();
            txtTipo.setText(pro.getTipo());
            
            estado = pro.getEstado();
            System.out.println("estado" + estado);
            String testValue4 = estado;
            for (int i = 0; i < comboBoxEstado.getModel().getSize(); i++) {
                if (comboBoxEstado.getItemAt(i).equals(testValue4)) {
                    System.out.println(i);
                    comboBoxEstado.setSelectedIndex(i);
                    break;
                }
            }
            
            dia1=pro.getDia1();
            dia2=pro.getDia2();
            txtTiempoEntrega.setText(pro.getDia1()+" A "+pro.getDia2()+" DÍAS HÁBILES");
            
            
            obs = pro.getObservacion();
            txtObsInterna.setText(pro.getObservacionInterna());
        } else {
            JOptionPane.showMessageDialog(null, "Proforma no registrada");
            //System.out.println("Error");
        }
    }
     
     private void consultarContactoCliente(int idCC) throws Exception {

        contactocliente = contactoclientecontroler.ContactoClienteBuscar(idCC);
        if (contactocliente != null) {
            
            txtContactoCliente.setText(contactocliente.getNombres()+" "+contactocliente.getApellidos());
            txtCorreo.setText(contactocliente.getCorreo());
            txtTelefono.setText(contactocliente.getTlf1());
            
        } else {
            JOptionPane.showMessageDialog(null, "Contacto no registrado");
            //System.out.println("Error");
        }
    }
     
     private void consultarClientePorId(int iddecliente) throws Exception {
        cliente = clientecontroler.ClienteBuscar1(iddecliente);
        if (cliente != null) {

            //txtRazonSocial.setText(pro.getRazonSocial());
            txtCliente.setText(cliente.getRazonSocial());
            txtRuc.setText(cliente.getRuc());
           
        } else {
            JOptionPane.showMessageDialog(null, "Cliente no registrado por ahora");
            //System.out.println("Error");
        }
    }
     
     private void consultarUsuario1(int idus) throws Exception {
        usuario = usuariocontroler.UsuarioBuscar2(idus);
        if (usuario != null) {
            nombre = usuario.getNombres();
            apellido = usuario.getApellidos();
            usuarioNombre = nombre + " " + apellido;
            
        } else {
            JOptionPane.showMessageDialog(null, "Cliente no registrado");
            //System.out.println("Error");
        }
    }
     
    private void consultarAnioProforma(String fech, String num) throws Exception {
        pro = obj.ProformaBuscarAnio(fech, num);
        if (pro != null) {
            idProf=pro.getIdProforma();
            System.out.println("idProf del año:"+idProf);
            anioCadena=pro.getAnio();
            anio=Integer.parseInt(anioCadena);
            System.out.println("año:"+anio);
        }
  
    }
    
    private void consultarCotizacionParaPedido(int ic) throws Exception {
        pro = obj.ProformaBuscarCotizacionParaPedido(ic);
        if (pro != null) {
            idProf=pro.getIdProforma();
            numPed=pro.getNumPedido();
            comprobar=false;
        } else {
            comprobar=true;
          }
    }
    
    //----------------------------------- Procesar -----------------------------------------
    private void procesar(int op) throws Exception {
        pro = leerDatos();
        try {
            System.out.println("11111111111");
            String msg = obj.ProformaProcesar(pro, op);
            JOptionPane.showMessageDialog(null, msg);
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("Error" + e.getMessage());
        }
    }

//-------------------------------------- Leer datos ----------------------------------
    private Proforma leerDatos() throws Exception {

        Proforma prof = new Proforma();

        prof.setIdCliente(idCli);
        prof.setIdContactoCliente(idConCli);
        prof.setIdUsuario(idUs);
        prof.setMoneda(moneda);
        prof.setValidez(validez);
        prof.setFormPago(formPag);
        prof.setTipo(tipo);
        prof.setFechaEmision(fecha);
        prof.setDia1(dia1);
        prof.setDia2(dia2);
        prof.setEstado(comboEstado);
        prof.setObservacion(obs);
        prof.setObservacionInterna(txtObsInterna.getText());
        prof.setIdProforma(idProf);

        return prof;
    }
    
  //---------------------------Segunda Tabla --> Detalle de Proforma -------------------  
       
 void listaDetalleProforma() {
        List<DetalleProforma> lista;
        try {
            lista = detalleproformacontroler.DetalleProformaFiltrar(idProf);
            verDetalleProforma(lista);

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
            System.out.println("ERROR: " + e.getMessage());
        }
    }

    private void verDetalleProforma(List<DetalleProforma> lista) {
        String it,vu,f;
        float uv;
        DefaultTableModel tabla = (DefaultTableModel) jTable2.getModel();
        tabla.setRowCount(0);
        for (DetalleProforma detProf : lista) {
            if(!"".equals(detProf.getPrecioUnitario())){
                it=detProf.getImporte();
            }else{
                it="";
          }
            if(!"".equals(detProf.getPrecioUnitario())){
                f=detProf.getItem1();
            }else{
                f="";
          }
           
                Object[] fila = {detProf.getIdDetalleProforma(), detProf.getItem(), detProf.getCantidad(), detProf.getDescripcion(), detProf.getPrecioUnitario(),f,it};
                tabla.addRow(fila);
            }
        
    }
    
     void consultarPago() throws Exception {
        detalleproforma = detalleproformacontroler.DetalleProformaBuscar1(idProf);
       
        if (detalleproforma != null) {
            if (detalleproforma.getSubtotal() != null) {
                labelSubtotal.setText(detalleproforma.getSubtotal());
            } else {
                labelSubtotal.setText("0000.00");
            }
            if (detalleproforma.getIgv() != null) {
                labelIgv.setText(detalleproforma.getIgv());
            } else {
                labelIgv.setText("0000.00");
            }
            if (detalleproforma.getTotal() != null) {
                labelTotal.setText(detalleproforma.getTotal());
            } else {
                labelTotal.setText("0000.00");
            }
            
        }

        else {
            JOptionPane.showMessageDialog(null, "Cuentas no registradas");
            //System.out.println("Error");
        }
    }
     
   //------------------------------- limpiar -------------------------
     
    void limpiar() {
        comboBoxEstado.setSelectedIndex(0);
        comboBoxFiltro.setSelectedIndex(0);
        labelIgv.setText("0000.00");
        labelSubtotal.setText("0000.00");
        labelTotal.setText("0000.00");
        txtCliente.setText("");
        txtCodProf.setText("");
        txtFormPago.setText("");
        txtLike.setText("");
        txtMoneda.setText("");
        txtTipo.setText("");
        txtContactoCliente.setText("");
        txtObsInterna.setText("");
        txtRuc.setText("");
        txtCorreo.setText("");
        txtTelefono.setText("");
        txtTiempoEntrega.setText("");

    }
    
      void limpiarTabla() {
        comboBoxEstado.setSelectedIndex(0);
        txtObsInterna.setText("");
        labelIgv.setText("000000.00");
        labelSubtotal.setText("000000.00");
        labelTotal.setText("000000.00");
        txtCliente.setText("");
        txtCodProf.setText("");
        txtFormPago.setText("");
        txtMoneda.setText("");
        txtTipo.setText("");
        txtContactoCliente.setText("");
        txtRuc.setText("");
        txtCorreo.setText("");
        txtTelefono.setText("");
        txtTiempoEntrega.setText("");

    }
    
    void habilitarModificar(){
        comboBoxEstado.setEnabled(true);
        txtObsInterna.setEnabled(true);
                
         buttonModificar.setEnabled(false);
         buttonGuardar.setEnabled(true);
         buttonModificarCot.setEnabled(false);
         buttonPedido.setEnabled(false);
         buttonPdf.setEnabled(false);
         buttonImprimir.setEnabled(false);
        
    }

     void habilitarInicio(){
        comboBoxEstado.setEnabled(false);
        txtObsInterna.setEnabled(false);
               
         buttonModificar.setEnabled(false);
         buttonGuardar.setEnabled(false);
         buttonModificarCot.setEnabled(false);
         buttonPedido.setEnabled(false);
         buttonPdf.setEnabled(false);
         buttonImprimir.setEnabled(false);   
    }
     
     void habilitarGuardar(){
        comboBoxEstado.setEnabled(false);
        txtObsInterna.setEnabled(false);
                
         buttonModificar.setEnabled(true);
         buttonGuardar.setEnabled(false);
         buttonModificarCot.setEnabled(true);
         buttonPedido.setEnabled(true);
         buttonPdf.setEnabled(true);
         buttonImprimir.setEnabled(true);   
    }
}